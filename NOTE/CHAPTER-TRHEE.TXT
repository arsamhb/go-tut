    BASIC DATA TYPES

Go's types fall into 4 main categories:
    1- basic types 
    2- aggregate types
    3- reference types
    4- interface types

basic types include number string boolean
aggregate types include arrays and structs
reference type includes pointers slices maps functions and channels they are divers but they have ths common point that they all refer to a variable or state INDIRECTLY

**Integer

Go has many numeric data types, several sizes of integer and floating-point and complex numbers. numeric types determines the size and sign of the value.

There are four distinct sizes of signed integers int8 - int16 - int32 - int64 bits. and all of these have a uint version of unsigned value types.
we also have int and uint which is the most efficient.

there is a type rune is synonym for int32
also the type byte is a synonym for uint8
there is an unsigned integer type uintptr, this type width is not specified but it can hold all bits of a pointer value. we use it only on low level programming. 

range of values of an n-bit number is from -2^n-1 to (2^n-1)-1 and for unsigned integers is from 0 to 2^n-1 for example the range of int8 is âˆ’128 to 127, where as the range of uint8 is 0 to 255.

remainder % operator only applies on integers
the behavior of / depends on operand types on floats returns float and on integer returns integer

two values from the same basic type are comparable

overflow occurs when the result of an mathematical operation exceed the maximum value that can be stored in that type. in this case the high-order bits discarded

the overflow outcome differs in signed and unsigned values

Bitwise Binary Operators
bitwise operators perform operations on the individual bits of binary numbers

bitwise AND &
Compares each bit of two numbers. If both bits are 1, the result is 1. Otherwise, the result is 0.
Example: 1010 & 1100 results in 1000.

bitwise OR | 
Compares each bit of two numbers. If at least one bit is 1, the result is 1. Otherwise, the result is 0.
Example: 1010 | 1100 results in 1110.

bitwise XOR ^
Compares each bit of two numbers. If the bits are different, the result is 1. If they are the same, the result is 0.
Example: 1010 ^ 1100 results in 0110.

bit clear &^
Compares each bit of two numbers. If the corresponding bit in the second number is 1, the result is 0. Otherwise, the result is the bit from the first number.
Example: 1010 &^ 1100 results in 0010.

left shift <<
Shifts all bits in a number to the left by a specified number of positions, filling with zeros from the right.
Example: 1010 << 1 results in 10100.

right shift
Shifts all bits in a number to the right by a specified number of positions, filling with zeros from the left.
Example: 1010 >> 1 results in 0101.

consider this point the len method returns a signed int (it can be negative)

we tend to use int overall. not uint, even for those values that we know they cannot be negative

There is a point here you cannot do math operations on two values with two different types and you need to convert them in a common type.

in these conversions there are points to be considered
float to int conversion discard any fractional part and truncating toward zero.

there are adverbs like [1] or # for when we want to use user printf and verbs. you can use them with cheat sheet learning them is not necessary


**Floating-Point Numbers

In go we have two floating type float32 and float64
float32 provides six decimal digits pf precision and float64 provide 15 

the verb for printing floating points is %g 

Use float64 for most purposes to ensure higher precision.

Be mindful of the precision limits of float32 to avoid unexpected results.

math.MaxFloat32, math.MaxFloat64

The function math.IsNan tests whether its arguments is a not-a-number value.


**Complex Numbers

Provided in two sizes complex64 complex128
real and imag built-in functions extract real and imaginary components of the complex number



**Booleans

the conditions in if and for are booleans

&& has higher precedence than ||

There is no implicit conversion from a boolean value to a numeric value


**Strings

len a built-in function that returns the number of bytes(not runes)
s[i] -> gives the byte at i-th index of string s
s[i:j] -> it is called substring operation that yields a new string from to j but not the j-th byte

the + operator creates a new string by concatenating two strings

consider that string values are immutable

so you cannot do this s[0] = L -> compile error

Immutability means that it is safe for two copies of a string to share the same underlying memory. making it cheap to copy strings of any length


**String Literals

a string value can be written as a string literal a sequence of the bytes enclosed in double quotes

we can include Unicode code points in string literals

things that starts with \ called escape sequences and we can use them inside string literals. we use \ to added arbitrary bytes

we also can use hexadecimal escape for adding arbitrary bytes

if we use `` then we will have a raw string literals that does not care about escape sequences

Raw string literals are a convenient way to write regular expressions and HTML templates and JSON literals



**Unicode

US-ASCII: a system that uses 7bits to represent 128 characters 
ASCII only supports english characters so we made unicode

in the unicode all the characters from all the languages have a standard number assigned to them these numbers called unicode code point or in go terminology rune  rune / unicode code point 

The natural type pf unicode is int32, in go there is a synonym rune for this purpose

we can bring a sequence of runes as a sequence of numbers in int32 which is called UTF-32


## page 86 till 90 was not understood

**UTF-8
it uses between 1 and 4 bytes to represent each rune


** Strings And Byte Slices

bytes / strings / strconv / unicode -> four important package to work with strings

strings.LastIndex()

func Contains(s, substr string) bool
func Count(s, sep string) int
func Fields(s string) []string
func HasPrefix(s, prefix string) bool
func Index(s, sep string) int
func Join(a []string, sep string) string

func Contains(b, subslice []byte) bool
func Count(s, sep []byte) int
func Fields(s []byte) [][]byte
func HasPrefix(s, prefix []byte) bool
func Index(s, sep []byte) int
func Join(s [][]byte, sep []byte) []byte

bytes.Buffer
this method provide an efficient way for manipulation of byte slices



** CONVERSION BETWEEN STRINGS AND NUMBERS

strconv package converts integer to string

using FormatInt and FormatUint converts a number to different base

some verbs like %b %d %u and %x are handy in this process

fmt.Scanf works for inputs mixed with string and numbers



** CONSTANTS

The underlying type of every constant is a basic type: boolean, string, number

As with variables a sequence of constant can appear in one declaration

Many computation on constant can be completely evaluated at compile time which leads to compiler optimization


** CONSTANT GENERATOR iota (enum)


In a const declaration the value of iota begins at zero and increments by one for each item in the sequence

type Weekday int

const (
    Sunday Week = iota  -> Sunday = 0
    Monday              -> Monday = 1
    Tuesday             .
    .                   .
    .                   .
    .
)




** UNTYPED CONSTANTS

These constants have much greater numeric precision

untyped boolean, untyped integer, untyped rune, untyped floating-point, untyped complex, untyped string

